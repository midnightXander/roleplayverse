"""
Django settings for para project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-bur-rles0=f72k8&1ky@%e4&fth0!!mf!h^8vf_p1*k9t-o1u4') 

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
# CSRF_TRUSTED_ORIGINS = ['']
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'para.settings')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #Myapps
    'core',
    'users',
    'chat',
    'characters',
    'battles',
    'events',
    'blog',
    'moderator',
    'legal',

    #thirdParties
    'channels',
    'celery',
    'django_celery_beat',
    'django_celery_results',

    #Allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'pwa',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',

    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = 'para.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,"core","templates","core"),
            os.path.join(BASE_DIR,"para/templates"),
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'para.wsgi.application'
ASGI_APPLICATION = 'para.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#google auth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE' : [
            'profile',
            'email'
        ],
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_SECRET'),
        },
        'AUTH_PARAMS': {
            'access_type':'online',
        }
    }
}

SITE_ID = 2

LOGIN_REDIRECT_URL = '/home'
LOGOUT_REDIRECT_URL = '/'

#PWA
#PWA_SERVICE_WORKER_PATH = os.path.join(BASE_DIR, 'core/static/js', 'service_worker.js')

PWA_APP_NAME = 'RP verse'
PWA_APP_DESCRIPTION = "Role Play Verse PWA"
PWA_APP_THEME_COLOR = '#F97316' #'#000000'
PWA_APP_BACKGROUND_COLOR = '#1F2937' #'#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
	{
		'src': 'static/images/logo/logo_1_nobg.png',
		'sizes': '320x320'
	}
]
PWA_APP_ICONS_APPLE = [
	{
		'src': 'static/images/logo/logo_1_nobg.png',
		'sizes': '320x320'
	}
]
PWA_APP_SPLASH_SCREEN = [
	{
		'src': 'static/images/logo/logo_1_nobg.png',
		'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
	}
]
PWA_APP_DIR = 'ltr'
# PWA_APP_LANG = 'en-US'
PWA_APP_LANG = 'fr-FR'



# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

#set supported languages
LANGUAGES = [
    ('en','English'),
    ('fr','French'),
    ('es','Spanish')
]

LOCAL_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]



TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles')
STATICFILES_DIR = [os.path.join(BASE_DIR,'static')]


MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_URL = '/users/signin'

from celery.schedules import crontab

CELERY_BROKER_URL = os.environ.get('CELERY_BROKEN_URL','redis://127.0.0.1:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://127.0.0.1:6379/0')

#optional, for task results
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

#for django as result backend
#CELERY_RESULT_BACKEND  = 'django_db'

CELERY_BEAT_SCHEDULE = {
    'delete-expired-notifications-every-day':{
        'task': 'core.tasks.delete_expired_notifications',
        'schedule': crontab(hour = 0, minute=0) # Every day at midnight
    },
    # 'manage-battles-latency':{
    #     'task': 'core.tasks.manage_battles_latency',
    #     'schedule': crontab(hour = '*', minute=45) # Every day at midnight
    # },
    # 'add-monthly-points':{
    #     'task': 'core.tasks.add_monthly_points',
    #     'schedule': crontab(minute=0) # Every day at midnight
    # },

}


#For Geolocalisation
GEOIP_PATH = os.path.join(BASE_DIR, 'GeoLite2-Country')


import mimetypes
mimetypes.add_type("text/css", ".css", True)
mimetypes.add_type("text/javascript",".js",True)
LOGIN_URL = "/users/signin"


import dj_database_url

if 'DATABASE_URL' in os.environ:
    DATABASES['default'] = dj_database_url.config(
        conn_max_age=500,
        conn_health_checks=True
    )

# #reduce size of static files when served
# STORAGES = {
#     # ...
#     "staticfiles": {
#         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
#     },
# }    